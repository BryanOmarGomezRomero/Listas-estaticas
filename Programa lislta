#include <iostream>
#include <string>

const int MAX = 100;

class Empleado {
public:
    std::string nombre;
    // Otros atributos de la clase Empleado
};

class ListaEstatica {
private:
    Empleado datos[MAX];
    int tam;

public:
    ListaEstatica() : tam(0) {}

    int Agrega(Empleado emp) {
        if (Llena()) {
            std::cout << "No se puede agregar. La lista esta llena." << std::endl;
            return -1; // Indicar error
        }
        datos[tam] = emp;
        tam++;
        return 0; // Indicar éxito
    }

    int Busca(Empleado emp) {
        if (Vacia()) {
            std::cout << "La lista esta vacia." << std::endl;
            return -1; // Indicar error
        }

        for (int i = 0; i < tam; i++) {
            if (datos[i].nombre == emp.nombre) {
                std::cout << "Empleado encontrado en la posicion " << i + 1 << std::endl;
                return i;
            }
        }

        std::cout << "No se encontro el empleado." << std::endl;
        return -1; // Indicar error
    }

    int Elimina(int pos) {
        if (Vacia()) {
            std::cout << "La lista esta vacia." << std::endl;
            return -1; // Indicar error
        }

        if (pos < 1 || pos > tam) {
            std::cout << "Posicion invalida." << std::endl;
            return -1; // Indicar error
        }

        for (int i = pos - 1; i < tam - 1; i++) {
            datos[i] = datos[i + 1];
        }

        tam--;
        std::cout << "Empleado eliminado correctamente." << std::endl;
        return 0; // Indicar éxito
    }

    int Inserta(Empleado emp, int pos) {
        if (Llena()) {
            std::cout << "No se puede insertar. La lista esta llena." << std::endl;
            return -1; // Indicar error
        }

        if (pos < 1 || pos > tam + 1) {
            std::cout << "Posicion invalida." << std::endl;
            return -1; // Indicar error
        }

        for (int i = tam; i >= pos; i--) {
            datos[i] = datos[i - 1];
        }

        datos[pos - 1] = emp;
        tam++;
        std::cout << "Empleado insertado correctamente en la posicion " << pos << std::endl;
        return 0; // Indicar éxito
    }

    int Muestra() {
        if (Vacia()) {
            std::cout << "La lista esta vacia." << std::endl;
            return -1; // Indicar error
        }

        std::cout << "Empleados en la lista:" << std::endl;
        for (int i = 0; i < tam; i++) {
            std::cout << i + 1 << ". " << datos[i].nombre << std::endl;
            // Mostrar otros atributos del Empleado si es necesario
        }

        return 0; // Indicar éxito
    }

    int Vacia() {
        return tam == 0;
    }

    int Llena() {
        return tam == MAX;
    }
};

int main() {
    ListaEstatica lista;

    while (true) {
        std::cout << "Menu:" << std::endl;
        std::cout << "1. Agrega" << std::endl;
        std::cout << "2. Buscar" << std::endl;
        std::cout << "3. Elimina" << std::endl;
        std::cout << "4. Inserta" << std::endl;
        std::cout << "5. Muestra" << std::endl;
        std::cout << "6. Salir" << std::endl;

        int opcion;
        std::cout << "Ingrese una opcion: ";
        std::cin >> opcion;

        switch (opcion) {
            case 1: {
                Empleado emp;
                std::cout << "Ingrese el nombre del empleado: ";
                std::cin >> emp.nombre;
                // Ingresar otros atributos del Empleado si es necesario
                lista.Agrega(emp);
                break;
            }
            case 2: {
                Empleado emp;
                std::cout << "Ingrese el nombre del empleado a buscar: ";
                std::cin >> emp.nombre;
                // Ingresar otros atributos del Empleado si es necesario
                lista.Busca(emp);
                break;
            }
            case 3: {
                int pos;
                std::cout << "Ingrese la posicion del empleado a eliminar: ";
                std::cin >> pos;
                lista.Elimina(pos);
                break;
            }
            case 4: {
                Empleado emp;
                std::cout << "Ingrese el nombre del empleado a insertar: ";
                std::cin >> emp.nombre;
                // Ingresar otros atributos del Empleado si es necesario
                int pos;
                std::cout << "Ingrese la posicion donde se debe insertar el empleado: ";
                std::cin >> pos;
                lista.Inserta(emp, pos);
                break;
            }
            case 5:
                lista.Muestra();
                break;
            case 6:
                std::cout << "Programa finalizado." << std::endl;
                return 0;
            default:
                std::cout << "Opcion no valida. Intentelo de nuevo." << std::endl;
        }
    }

    return 0;
}

